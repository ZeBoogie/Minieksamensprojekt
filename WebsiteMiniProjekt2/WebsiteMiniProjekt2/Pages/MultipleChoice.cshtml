@page
@model WebsiteMiniProjekt2.Pages.QuistionPageModel
@{
	string name = Request.Query["Name"];
    string code = Request.Query["Code"];
}
 
<style>
	.button {
		border: none;
		color: black;
		padding: 96px 192px;
		text-align: center;
		font-size: 24px;
		margin: 4px 2px;
		border-radius: 4px;
		opacity: 0.8;
		transition: 0.3s;
		display: inline-block;
		text-decoration: none;
		cursor: pointer;
	}
	.button1
	{
		background-color: rgb(255,0,0);
		opacity: 0.8;
	}
		.button1:hover {
			opacity: 1
		}

	.Leftup {
		position: absolute;
		top: 10%;
		left: 30%;
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
		-ms-transform: translateX(-50%);
		transform: translateX(-50%);
	}
	.button2
	{
		background-color: rgb(0,155,0);
		opacity: 0.8;
	}
		.button2:hover{
		opacity: 1
		}

	.Rightup {
		position: absolute;
		top: 10%;
		left: 70%;
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
		-ms-transform: translateX(-50%);
		transform: translateX(-50%);
	}

	.button3 
	{
		background-color: blue;
		opacity: 0.8;
	}
		.button3:hover {
			opacity: 1
		}

	.Leftdown {
		position: absolute;
		top: 60%;
		left: 30%;
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
		-ms-transform: translateX(-50%);
		transform: translateX(-50%);
	}

	.button4 
	{
		background-color: yellow;
		opacity: 0.8;
	}
		.button4:hover {
			opacity: 1
		}

	.Rightdown {
		position: absolute;
		top: 60%;
		left: 70%;
		-ms-transform: translateY(-50%);
		transform: translateY(-50%);
		-ms-transform: translateX(-50%);
		transform: translateX(-50%);
	}

	</style>
	<body>
	<h3 id="topText">Waiting... </h3>
	<div class="Leftup">
		<button class="button button1" id="TL">A</button>
		</div>
	<div class="Rightup">
		<button class="button button2" id="TR">B</button>
		</div>
	<div class="Leftdown">
		<button class="button button3">C</button>
		</div>
	<div class="Rightdown">
		<button class="button button4">D</button>
		</div>
	</body>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
	"use strict";

	var connection = new signalR.HubConnectionBuilder().withUrl("/webHub").build();

	connection.start().then(function () {
		document.getElementById("topText").innerHTML = "Connected  to server - waiting for click or nextquestion";
		connection.invoke("PrintString", "connection multplechoice started").catch(function (err) {
            return console.error(err.toString());
        });
		event.preventDefault();
	});

	document.getElementById("TL").addEventListener("click", function (event) {
		window.location.replace("/Waitingpage?Code=" + @code + "&Name=" + @name);
		connection.invoke("submitAnswer", "" + @name, "" + @code, "0").catch(function (err) {
			return console.error(err.toString());
		});
		event.preventDefault();
	});

	document.getElementById("TR").addEventListener("click", function (event) {
		window.location.replace("/Waitingpage?Code=" + @code + "&Name=" + @name);
		connection.invoke("submitAnswer", "" + @name, "" + @code, "1").catch(function (err) {
			return console.error(err.toString());
		});
		event.preventDefault();
	});

	document.getElementById("BL").addEventListener("click", function (event) {
		window.location.replace("/Waitingpage?Code=" + @code + "&Name=" + @name);
		connection.invoke("submitAnswer", "" + @name, "" + @code, "2").catch(function (err) {
			return console.error(err.toString());
		});
		event.preventDefault();
	});

	document.getElementById("BR").addEventListener("click", function (event) {
		window.location.replace("/Waitingpage?Code=" + @code + "&Name=" + @name);
		connection.invoke("submitAnswer", "" + @name, "" + @code, "3").catch(function (err) {
			return console.error(err.toString());
		});
		event.preventDefault();
	});
	
	
	connection.on("nextQuestion", function () {
		document.getElementById("topText").innerHTML = "changing page";
		window.location.replace("/MultipleChoice");
	});
</script>